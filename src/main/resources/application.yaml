spring:
  # Kafka 配置项，对应 KafkaProperties 配置类
  kafka:
    bootstrap-servers: 101.34.210.171:9092 #127.0.0.1:9092 # 192.168.1.162:9092  指定 Kafka Broker 地址，可以设置多个，以逗号分隔
    # Kafka Producer 配置项
    producer:
      acks: 1 # 0-不应答。1-leader 应答。all-所有 leader 和 follower 应答。
      retries: 3 # 发送失败时，重试发送的次数
      key-serializer: org.apache.kafka.common.serialization.StringSerializer # 消息的 key 的序列化
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 消息的 value 的序列化
    # Kafka Consumer 配置项
    consumer:
      auto-offset-reset: earliest # 设置消费者分组最初的消费进度为 earliest 。可参考博客 https://blog.csdn.net/lishuangzhe7047/article/details/74530417 理解
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: cn.iocoder.springboot.lab03.kafkademo.message
    # Kafka Consumer Listener 监听器配置
    listener:
      missing-topics-fatal: false # 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错
  redis:
    host: 101.34.210.171
    port: 6379

  server:
    host: 192.168.3.44
    unrealMap: "{8880: 'D:\\boom\\baopo_1008\\baopo_server_8012_ws8092\\Windows\\baopo_demo.exe'}"

    # 这里的8880 指的是推流服务和虚幻建立连接的端口，可在启动推流服务后查看。
  pixel-streaming:
    host: 192.168.3.44
logging:
  level:
    org:
      springframework:
        kafka: ERROR # spring-kafka INFO 日志太多了，所以我们限制只打印 ERROR 级别
      apache:
        kafka: ERROR # kafka INFO 日志太多了，所以我们限制只打印 ERROR 级别

# Topic配置项 （注解里不好引用配置文件的值，topic配置在message包下）
#topic:
#  request-topic: topic-1
#  response-topic: effect-data-topic-2


ws:
  host: 127.0.0.1
  port: 80
  path: /ws/

server:
  port: 8901